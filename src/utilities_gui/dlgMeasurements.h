#ifndef __dlgMeasurements__
#define __dlgMeasurements__

/**
@file
Subclass of dlgMeasurements_view, which is generated by wxFormBuilder.
*/

#include "utilities_gui.h"

#include "LMS8001.h"

#include "../measurements/lime_E4440A.h"

#include "../measurements/LMS7002M_statuses.h"
#include "../measurements/LMS7002M_parameters.h"

#include "lms8suiteEvents.h"

#include <thread>
#include <atomic>

//// end generated include

///define for parameter enumeration if prefix might be needed
#define LMS7_PREFIX LMS7_
#define PASTER(x,y) x ## y
#define EVALUATOR(x,y)  PASTER(x,y)
#define LMS7param(id) EVALUATOR(LMS7_PREFIX, id)

enum VCO_ModuleLMS7
{
	VCO_CGEN, VCO_SXR, VCO_SXT
};

/** Implementing dlgMeasurements_view */
class dlgMeasurements : public dlgMeasurements_view
{
	protected:
		// Handlers for dlgMeasurements_view events.
		void onMeasMeasure(wxCommandEvent& event);
		void onMeasStop(wxCommandEvent& event);
		void appendLog(char* line);
		static void DoMeasure(dlgMeasurements* pthis);
		std::thread threadMeasure;
		std::atomic_bool stopThreadMeasure;
		void OnDlgMeasurementsClose(wxCloseEvent& event);
		void onMeasSaveAsCSV(wxCommandEvent& event);
		int SaveCSV(const char* filename);
		void onMeasSaveSetup(wxCommandEvent& event);
		liblms8_status SaveMeasSetup(const char* filename);
		void onMeasLoadSetup(wxCommandEvent& event);
		liblms8_status LoadMeasSetup(const char* filename);
		void OnLMS7Connect(wxCommandEvent& event);
		void onLMS7write(wxCommandEvent& event);
		void onLMS7read(wxCommandEvent& event);
		void OnUpdateUIChkMeasUseBandMarker(wxUpdateUIEvent& event);

		void OnLMS7ControlBoardConnect(wxCommandEvent& event);

	public:
		/** Constructor */
//		dlgMeasurements( wxWindow* parent );
	//// end generated class members
        dlgMeasurements(wxWindow* parent, wxWindowID id = wxID_ANY, const wxString &title = wxEmptyString, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long styles = 0);
		~dlgMeasurements();
//        virtual void Initialize();
		void Initialize(LMScomms* pCtrPort, LMS8001* pControl);
		void SPIwrite(char* field, int idata);
		void SPIwriteLMS7(char* field, int idata);

		LMS7Parameter findLMS7Param(char* field);
		liblms7_status Modify_SPI_Reg_bitsLMS7(const LMS7Parameter &param, const uint16_t value, bool fromChip = true);
		liblms7_status Modify_SPI_Reg_bitsLMS7(uint16_t address, uint8_t msb, uint8_t lsb, uint16_t value, bool fromChip = true);
		liblms7_status SPI_writeLMS7(uint16_t address, uint16_t data);
		uint16_t SPI_readLMS7(uint16_t address, bool fromChip = true, liblms7_status *status = 0);

		liblms7_status SetFrequencySXLMS7(bool tx, float_type freq_MHz, float_type refClk_MHz);
		liblms7_status TuneVCOLMS7(VCO_ModuleLMS7 module);

		liblms7_status SetLMS7Frequency(S64 LMS7Freq);
		liblms7_status LMS7VCOCoarseTune(S64 LMS7VCOFreq);
		uint16_t Get_SPI_Reg_bitsLMS7(const LMS7Parameter &param, bool fromChip = true);
		uint16_t Get_SPI_Reg_bitsLMS7(uint16_t address, uint8_t msb, uint8_t lsb, bool fromChip = true);

		static double gVCO_frequency_tableLMS7[3][2];

protected:
		LMScomms* ctrPort;
		LMS8001* lmsControl;

		LMScomms* lms7controlPort;
};

#endif // __dlgMeasurements__
